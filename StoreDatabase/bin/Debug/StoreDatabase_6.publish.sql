/*
Deployment script for StoreDatabase

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "StoreDatabase"
:setvar DefaultFilePrefix "StoreDatabase"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL11.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL11.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE Cyrillic_General_100_BIN
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[AdditionalProductParameter]...';


GO
CREATE TABLE [dbo].[AdditionalProductParameter] (
    [Id]         BIGINT        IDENTITY (1, 1) NOT NULL,
    [Code]       VARCHAR (64)  NOT NULL,
    [Name]       VARCHAR (128) NOT NULL,
    [DataTypeId] BIGINT        NOT NULL,
    [IsActive]   BIT           NOT NULL,
    [CreatedOn]  DATETIME      NOT NULL,
    [UpdatedOn]  DATETIME      NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC),
    UNIQUE NONCLUSTERED ([Code] ASC)
);


GO
PRINT N'Creating [dbo].[AdditionalStoreParameter]...';


GO
CREATE TABLE [dbo].[AdditionalStoreParameter] (
    [Id]         BIGINT        IDENTITY (1, 1) NOT NULL,
    [Code]       VARCHAR (64)  NOT NULL,
    [Name]       VARCHAR (128) NOT NULL,
    [DataTypeId] BIGINT        NOT NULL,
    [IsActive]   BIT           NOT NULL,
    [CreatedOn]  DATETIME      NOT NULL,
    [UpdatedOn]  DATETIME      NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC),
    UNIQUE NONCLUSTERED ([Code] ASC)
);


GO
PRINT N'Creating [dbo].[DataType]...';


GO
CREATE TABLE [dbo].[DataType] (
    [Id]        BIGINT       IDENTITY (1, 1) NOT NULL,
    [Code]      VARCHAR (64) NOT NULL,
    [Name]      VARCHAR (64) NOT NULL,
    [IsActive]  BIT          NOT NULL,
    [CreatedOn] DATETIME     NOT NULL,
    [UpdatedOn] DATETIME     NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC),
    UNIQUE NONCLUSTERED ([Code] ASC)
);


GO
PRINT N'Creating [dbo].[PriceRange]...';


GO
CREATE TABLE [dbo].[PriceRange] (
    [Id]        BIGINT          IDENTITY (1, 1) NOT NULL,
    [Code]      VARCHAR (64)    NOT NULL,
    [Name]      VARCHAR (100)   NOT NULL,
    [PriceLow]  DECIMAL (10, 2) NOT NULL,
    [PriceHigh] DECIMAL (10, 2) NULL,
    [IsActive]  BIT             NOT NULL,
    [CreatedOn] DATETIME        NOT NULL,
    [UpdatedOn] DATETIME        NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC),
    UNIQUE NONCLUSTERED ([Code] ASC)
);


GO
PRINT N'Creating [dbo].[Product]...';


GO
CREATE TABLE [dbo].[Product] (
    [Id]        BIGINT          IDENTITY (1, 1) NOT NULL,
    [Code]      VARCHAR (64)    NOT NULL,
    [Name]      VARCHAR (100)   NOT NULL,
    [Price]     DECIMAL (10, 2) NOT NULL,
    [IsActive]  BIT             NOT NULL,
    [CreatedOn] DATETIME        NOT NULL,
    [UpdatedOn] DATETIME        NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC),
    UNIQUE NONCLUSTERED ([Code] ASC)
);


GO
PRINT N'Creating [dbo].[ProductAdditionalProductParameterMapping]...';


GO
CREATE TABLE [dbo].[ProductAdditionalProductParameterMapping] (
    [Id]                           BIGINT        IDENTITY (1, 1) NOT NULL,
    [ProductId]                    BIGINT        NOT NULL,
    [AdditionalProductParameterId] BIGINT        NOT NULL,
    [Value]                        VARCHAR (MAX) NOT NULL,
    [IsActive]                     BIT           NOT NULL,
    [CreatedOn]                    DATETIME      NOT NULL,
    [UpdatedOn]                    DATETIME      NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Sale]...';


GO
CREATE TABLE [dbo].[Sale] (
    [Id]            BIGINT   IDENTITY (1, 1) NOT NULL,
    [StoreId]       BIGINT   NOT NULL,
    [OperationDate] DATETIME NOT NULL,
    [IsActive]      BIT      NOT NULL,
    [CreatedOn]     DATETIME NOT NULL,
    [UpdatedOn]     DATETIME NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[SaleDetail]...';


GO
CREATE TABLE [dbo].[SaleDetail] (
    [Id]        BIGINT          IDENTITY (1, 1) NOT NULL,
    [SaleId]    BIGINT          NOT NULL,
    [ProductId] BIGINT          NOT NULL,
    [Quantity]  DECIMAL (10, 2) NOT NULL,
    [IsActive]  BIT             NOT NULL,
    [CreatedOn] DATETIME        NOT NULL,
    [UpdatedOn] DATETIME        NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Store]...';


GO
CREATE TABLE [dbo].[Store] (
    [Id]        BIGINT       IDENTITY (1, 1) NOT NULL,
    [Code]      VARCHAR (64) NOT NULL,
    [Name]      VARCHAR (50) NOT NULL,
    [IsActive]  BIT          NOT NULL,
    [CreatedOn] DATETIME     NOT NULL,
    [UpdatedOn] DATETIME     NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC),
    UNIQUE NONCLUSTERED ([Code] ASC)
);


GO
PRINT N'Creating [dbo].[StoreAdditionalStoreParameterMapping]...';


GO
CREATE TABLE [dbo].[StoreAdditionalStoreParameterMapping] (
    [Id]                         BIGINT        IDENTITY (1, 1) NOT NULL,
    [StoreId]                    BIGINT        NOT NULL,
    [AdditionalStoreParameterId] BIGINT        NOT NULL,
    [Value]                      VARCHAR (MAX) NOT NULL,
    [IsActive]                   BIT           NOT NULL,
    [CreatedOn]                  DATETIME      NOT NULL,
    [UpdatedOn]                  DATETIME      NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating unnamed constraint on [dbo].[AdditionalProductParameter]...';


GO
ALTER TABLE [dbo].[AdditionalProductParameter]
    ADD DEFAULT 1 FOR [IsActive];


GO
PRINT N'Creating unnamed constraint on [dbo].[AdditionalProductParameter]...';


GO
ALTER TABLE [dbo].[AdditionalProductParameter]
    ADD DEFAULT GETDATE() FOR [CreatedOn];


GO
PRINT N'Creating unnamed constraint on [dbo].[AdditionalProductParameter]...';


GO
ALTER TABLE [dbo].[AdditionalProductParameter]
    ADD DEFAULT GETDATE() FOR [UpdatedOn];


GO
PRINT N'Creating unnamed constraint on [dbo].[AdditionalStoreParameter]...';


GO
ALTER TABLE [dbo].[AdditionalStoreParameter]
    ADD DEFAULT 1 FOR [IsActive];


GO
PRINT N'Creating unnamed constraint on [dbo].[AdditionalStoreParameter]...';


GO
ALTER TABLE [dbo].[AdditionalStoreParameter]
    ADD DEFAULT GETDATE() FOR [CreatedOn];


GO
PRINT N'Creating unnamed constraint on [dbo].[AdditionalStoreParameter]...';


GO
ALTER TABLE [dbo].[AdditionalStoreParameter]
    ADD DEFAULT GETDATE() FOR [UpdatedOn];


GO
PRINT N'Creating unnamed constraint on [dbo].[DataType]...';


GO
ALTER TABLE [dbo].[DataType]
    ADD DEFAULT NEWID() FOR [Code];


GO
PRINT N'Creating unnamed constraint on [dbo].[DataType]...';


GO
ALTER TABLE [dbo].[DataType]
    ADD DEFAULT 1 FOR [IsActive];


GO
PRINT N'Creating unnamed constraint on [dbo].[DataType]...';


GO
ALTER TABLE [dbo].[DataType]
    ADD DEFAULT GETDATE() FOR [CreatedOn];


GO
PRINT N'Creating unnamed constraint on [dbo].[DataType]...';


GO
ALTER TABLE [dbo].[DataType]
    ADD DEFAULT GETDATE() FOR [UpdatedOn];


GO
PRINT N'Creating unnamed constraint on [dbo].[PriceRange]...';


GO
ALTER TABLE [dbo].[PriceRange]
    ADD DEFAULT NEWID() FOR [Code];


GO
PRINT N'Creating unnamed constraint on [dbo].[PriceRange]...';


GO
ALTER TABLE [dbo].[PriceRange]
    ADD DEFAULT 1 FOR [IsActive];


GO
PRINT N'Creating unnamed constraint on [dbo].[PriceRange]...';


GO
ALTER TABLE [dbo].[PriceRange]
    ADD DEFAULT GETDATE() FOR [CreatedOn];


GO
PRINT N'Creating unnamed constraint on [dbo].[PriceRange]...';


GO
ALTER TABLE [dbo].[PriceRange]
    ADD DEFAULT GETDATE() FOR [UpdatedOn];


GO
PRINT N'Creating unnamed constraint on [dbo].[Product]...';


GO
ALTER TABLE [dbo].[Product]
    ADD DEFAULT 1 FOR [IsActive];


GO
PRINT N'Creating unnamed constraint on [dbo].[Product]...';


GO
ALTER TABLE [dbo].[Product]
    ADD DEFAULT GETDATE() FOR [CreatedOn];


GO
PRINT N'Creating unnamed constraint on [dbo].[Product]...';


GO
ALTER TABLE [dbo].[Product]
    ADD DEFAULT GETDATE() FOR [UpdatedOn];


GO
PRINT N'Creating unnamed constraint on [dbo].[ProductAdditionalProductParameterMapping]...';


GO
ALTER TABLE [dbo].[ProductAdditionalProductParameterMapping]
    ADD DEFAULT 1 FOR [IsActive];


GO
PRINT N'Creating unnamed constraint on [dbo].[ProductAdditionalProductParameterMapping]...';


GO
ALTER TABLE [dbo].[ProductAdditionalProductParameterMapping]
    ADD DEFAULT GETDATE() FOR [CreatedOn];


GO
PRINT N'Creating unnamed constraint on [dbo].[ProductAdditionalProductParameterMapping]...';


GO
ALTER TABLE [dbo].[ProductAdditionalProductParameterMapping]
    ADD DEFAULT GETDATE() FOR [UpdatedOn];


GO
PRINT N'Creating unnamed constraint on [dbo].[Sale]...';


GO
ALTER TABLE [dbo].[Sale]
    ADD DEFAULT 1 FOR [IsActive];


GO
PRINT N'Creating unnamed constraint on [dbo].[Sale]...';


GO
ALTER TABLE [dbo].[Sale]
    ADD DEFAULT GETDATE() FOR [CreatedOn];


GO
PRINT N'Creating unnamed constraint on [dbo].[Sale]...';


GO
ALTER TABLE [dbo].[Sale]
    ADD DEFAULT GETDATE() FOR [UpdatedOn];


GO
PRINT N'Creating unnamed constraint on [dbo].[SaleDetail]...';


GO
ALTER TABLE [dbo].[SaleDetail]
    ADD DEFAULT 1 FOR [IsActive];


GO
PRINT N'Creating unnamed constraint on [dbo].[SaleDetail]...';


GO
ALTER TABLE [dbo].[SaleDetail]
    ADD DEFAULT GETDATE() FOR [CreatedOn];


GO
PRINT N'Creating unnamed constraint on [dbo].[SaleDetail]...';


GO
ALTER TABLE [dbo].[SaleDetail]
    ADD DEFAULT GETDATE() FOR [UpdatedOn];


GO
PRINT N'Creating unnamed constraint on [dbo].[Store]...';


GO
ALTER TABLE [dbo].[Store]
    ADD DEFAULT 1 FOR [IsActive];


GO
PRINT N'Creating unnamed constraint on [dbo].[Store]...';


GO
ALTER TABLE [dbo].[Store]
    ADD DEFAULT GETDATE() FOR [CreatedOn];


GO
PRINT N'Creating unnamed constraint on [dbo].[Store]...';


GO
ALTER TABLE [dbo].[Store]
    ADD DEFAULT GETDATE() FOR [UpdatedOn];


GO
PRINT N'Creating unnamed constraint on [dbo].[StoreAdditionalStoreParameterMapping]...';


GO
ALTER TABLE [dbo].[StoreAdditionalStoreParameterMapping]
    ADD DEFAULT 1 FOR [IsActive];


GO
PRINT N'Creating unnamed constraint on [dbo].[StoreAdditionalStoreParameterMapping]...';


GO
ALTER TABLE [dbo].[StoreAdditionalStoreParameterMapping]
    ADD DEFAULT GETDATE() FOR [CreatedOn];


GO
PRINT N'Creating unnamed constraint on [dbo].[StoreAdditionalStoreParameterMapping]...';


GO
ALTER TABLE [dbo].[StoreAdditionalStoreParameterMapping]
    ADD DEFAULT GETDATE() FOR [UpdatedOn];


GO
PRINT N'Creating [dbo].[FK_AdditionalProductParameter_DataType]...';


GO
ALTER TABLE [dbo].[AdditionalProductParameter]
    ADD CONSTRAINT [FK_AdditionalProductParameter_DataType] FOREIGN KEY ([DataTypeId]) REFERENCES [dbo].[DataType] ([Id]);


GO
PRINT N'Creating [dbo].[FK_AdditionalStoreParameter_DataType]...';


GO
ALTER TABLE [dbo].[AdditionalStoreParameter]
    ADD CONSTRAINT [FK_AdditionalStoreParameter_DataType] FOREIGN KEY ([DataTypeId]) REFERENCES [dbo].[DataType] ([Id]);


GO
PRINT N'Creating [dbo].[FK_ProductAdditionalProductParameterMapping_Product]...';


GO
ALTER TABLE [dbo].[ProductAdditionalProductParameterMapping]
    ADD CONSTRAINT [FK_ProductAdditionalProductParameterMapping_Product] FOREIGN KEY ([ProductId]) REFERENCES [dbo].[Product] ([Id]);


GO
PRINT N'Creating [dbo].[FK_ProductAdditionalProductParameterMapping_AdditionalProductParameterMapping]...';


GO
ALTER TABLE [dbo].[ProductAdditionalProductParameterMapping]
    ADD CONSTRAINT [FK_ProductAdditionalProductParameterMapping_AdditionalProductParameterMapping] FOREIGN KEY ([AdditionalProductParameterId]) REFERENCES [dbo].[AdditionalProductParameter] ([Id]);


GO
PRINT N'Creating [dbo].[FK_Sale_Store]...';


GO
ALTER TABLE [dbo].[Sale]
    ADD CONSTRAINT [FK_Sale_Store] FOREIGN KEY ([StoreId]) REFERENCES [dbo].[Store] ([Id]);


GO
PRINT N'Creating [dbo].[FK_StoreAdditionalStoreParameterMapping_Store]...';


GO
ALTER TABLE [dbo].[StoreAdditionalStoreParameterMapping]
    ADD CONSTRAINT [FK_StoreAdditionalStoreParameterMapping_Store] FOREIGN KEY ([StoreId]) REFERENCES [dbo].[Store] ([Id]);


GO
PRINT N'Creating [dbo].[FK_StoreAdditionalStoreParameterMapping_AdditionalStoreParameterMapping]...';


GO
ALTER TABLE [dbo].[StoreAdditionalStoreParameterMapping]
    ADD CONSTRAINT [FK_StoreAdditionalStoreParameterMapping_AdditionalStoreParameterMapping] FOREIGN KEY ([AdditionalStoreParameterId]) REFERENCES [dbo].[AdditionalStoreParameter] ([Id]);


GO
PRINT N'Creating [dbo].[CK_Product_Price]...';


GO
ALTER TABLE [dbo].[Product]
    ADD CONSTRAINT [CK_Product_Price] CHECK (Price > 0);


GO
PRINT N'Creating [dbo].[CK_SaleDetail_Quantity]...';


GO
ALTER TABLE [dbo].[SaleDetail]
    ADD CONSTRAINT [CK_SaleDetail_Quantity] CHECK (Quantity > 0);


GO
PRINT N'Creating [dbo].[TriggerAdditionalProductParameterParameterUpdate]...';


GO

CREATE TRIGGER [dbo].[TriggerAdditionalProductParameterParameterUpdate]
    ON [dbo].[AdditionalProductParameter]
    FOR UPDATE
    AS
    BEGIN
        SET NOCOUNT ON;

		UPDATE app SET UpdatedOn = GETDATE()
		FROM inserted ins 
		INNER JOIN AdditionalProductParameter app ON app.Id = ins.Id;
    END
GO
PRINT N'Creating [dbo].[TriggerAdditionalStoreParameterUpdate]...';


GO

CREATE TRIGGER [dbo].[TriggerAdditionalStoreParameterUpdate]
    ON [dbo].[AdditionalStoreParameter]
    FOR UPDATE
    AS
    BEGIN
        SET NOCOUNT ON;

		UPDATE asp SET UpdatedOn = GETDATE()
		FROM inserted ins 
		INNER JOIN AdditionalStoreParameter asp ON asp.Id = ins.Id;
    END
GO
PRINT N'Creating [dbo].[TriggerPriceRangeUpdate]...';


GO

CREATE TRIGGER [dbo].[TriggerPriceRangeUpdate]
    ON [dbo].[PriceRange]
    FOR UPDATE
    AS
    BEGIN
        SET NOCOUNT ON;

		UPDATE pr SET UpdatedOn = GETDATE()
		FROM inserted ins 
		INNER JOIN PriceRange pr ON pr.Id = ins.Id;
    END
GO
PRINT N'Creating [dbo].[TriggerProductUpdate]...';


GO

CREATE TRIGGER [dbo].[TriggerProductUpdate]
    ON [dbo].[Product]
    FOR UPDATE
    AS
    BEGIN
        SET NOCOUNT ON;

		UPDATE pro SET UpdatedOn = GETDATE()
		FROM inserted ins 
		INNER JOIN Product pro ON pro.Id = ins.Id;
    END
GO
PRINT N'Creating [dbo].[TriggerProductAdditionalProductParameterMappingMappingUpdate]...';


GO

CREATE TRIGGER [dbo].[TriggerProductAdditionalProductParameterMappingMappingUpdate]
    ON [dbo].[ProductAdditionalProductParameterMapping]
    FOR UPDATE
    AS
    BEGIN
        SET NOCOUNT ON;

		UPDATE pap SET UpdatedOn = GETDATE()
		FROM inserted ins 
		INNER JOIN ProductAdditionalProductParameterMapping pap ON pap.Id = ins.Id;
    END
GO
PRINT N'Creating [dbo].[TriggerSaleUpdate]...';


GO

CREATE TRIGGER [dbo].[TriggerSaleUpdate]
    ON [dbo].[Sale]
    FOR UPDATE
    AS
    BEGIN
        SET NOCOUNT ON;

		UPDATE sal SET UpdatedOn = GETDATE()
		FROM inserted ins 
		INNER JOIN Sale sal ON sal.Id = ins.Id;
    END
GO
PRINT N'Creating [dbo].[TriggerSaleDetailUpdate]...';


GO

CREATE TRIGGER [dbo].[TriggerSaleDetailUpdate]
    ON [dbo].[SaleDetail]
    FOR UPDATE
    AS
    BEGIN
        SET NOCOUNT ON;

		UPDATE sd SET UpdatedOn = GETDATE()
		FROM inserted ins 
		INNER JOIN SaleDetail sd ON sd.Id = ins.Id;
    END
GO
PRINT N'Creating [dbo].[TriggerStoreUpdate]...';


GO

CREATE TRIGGER [dbo].[TriggerStoreUpdate]
    ON [dbo].[Store]
    FOR UPDATE
    AS
    BEGIN
        SET NOCOUNT ON;

		UPDATE sto SET UpdatedOn = GETDATE()
		FROM inserted ins 
		INNER JOIN Store sto ON sto.Id = ins.Id;
    END
GO
PRINT N'Creating [dbo].[TriggerStoreAdditionalStoreParameterMappingUpdate]...';


GO

CREATE TRIGGER [dbo].[TriggerStoreAdditionalStoreParameterMappingUpdate]
    ON [dbo].[StoreAdditionalStoreParameterMapping]
    FOR UPDATE
    AS
    BEGIN
        SET NOCOUNT ON;

		UPDATE sap SET UpdatedOn = GETDATE()
		FROM inserted ins 
		INNER JOIN StoreAdditionalStoreParameterMapping sap ON sap.Id = ins.Id;
    END
GO
PRINT N'Creating [dbo].[AverageProductVolume]...';


GO
CREATE VIEW [dbo].[AverageProductVolume]
	AS 
SELECT 
	MAX(pr.Name) AS PriceRangeName,
	AVG(CAST(pap.Value AS DECIMAL(10, 2))) AS AverageVolume
FROM Product pro WITH (NOLOCK) 
INNER JOIN PriceRange pr WITH (NOLOCK) ON pro.Price > pr.PriceLow AND (pro.Price <= pr.PriceHigh OR pr.PriceHigh IS NULL)
INNER JOIN ProductAdditionalProductParameterMapping pap WITH (NOLOCK) ON pap.ProductId = pro.Id 
INNER JOIN AdditionalProductParameter app WITH (NOLOCK) ON app.Id = pap.AdditionalProductParameterId
WHERE app.Code = 'ProductVolume' AND pro.IsActive = 1
GROUP BY pr.Id
GO
PRINT N'Creating [dbo].[SaleTotal]...';


GO
CREATE VIEW [dbo].[SaleTotal]
	AS
SELECT 
	sto.Id AS StoreId,
	MAX(sto.Name) AS StoreName,
	pro.Id AS ProductId,
	MAX(pro.Name) AS ProductName,
	DATEPART(YEAR, sal.OperationDate) AS [Year], 
	DATEPART(MONTH, sal.OperationDate) AS [Month],
	ISNULL(SUM(sd.Quantity), 0) AS TotalQuantity,
	ISNULL(SUM(sd.Quantity * pro.Price), 0) AS TotalSum
FROM Store sto WITH (NOLOCK)
LEFT JOIN Sale sal WITH (NOLOCK) ON sto.Id = sal.StoreId
LEFT JOIN SaleDetail sd WITH (NOLOCK) ON sd.SaleId = sal.Id
LEFT JOIN Product pro WITH (NOLOCK) ON pro.Id = sd.ProductId
WHERE sal.IsActive = 1 AND sto.IsActive = 1 AND sd.IsActive = 1 AND pro.IsActive = 1
GROUP BY sto.Id, pro.Id, DATEPART(YEAR, sal.OperationDate), DATEPART(MONTH, sal.OperationDate)
GO
PRINT N'Creating [dbo].[UspSaveProductAdditionalParameterValueDate]...';


GO
CREATE PROCEDURE [dbo].[UspSaveProductAdditionalParameterValueDate]
	@ProductCode AS VARCHAR(64),
	@AdditionalProductParameterCode AS VARCHAR(64),
	@Value DATE
AS
BEGIN
	DECLARE @ProductId BIGINT;
	DECLARE @AdditionalProductParameterId BIGINT;
	DECLARE @Error VARCHAR(256) = '';

	SELECT TOP(1) @ProductId = pro.Id 
	FROM Product pro WITH (NOLOCK) 
	WHERE pro.Code = @ProductCode AND pro.IsActive = 1;

	SELECT TOP(1) @AdditionalProductParameterId = app.Id 
	FROM AdditionalProductParameter app WITH (NOLOCK) 
	INNER JOIN DataType dt WITH (NOLOCK) ON dt.Id = app.DataTypeId
	WHERE app.Code = @AdditionalProductParameterCode AND app.IsActive = 1 AND dt.Code = '3';

	IF @ProductId IS NULL
		SET @Error = 'Товар не существует. ';
	IF @AdditionalProductParameterId IS NULL 
		SET @Error = CONCAT(@Error, 'Дополнительный параметр продукта не существует или имеет неверный формат');

	IF @Error <> ''
		THROW 51001, @Error, 1;

	MERGE ProductAdditionalProductParameterMapping AS TargetTable
	USING
	(
		SELECT @ProductId AS ProductId, 
			@AdditionalProductParameterId AS AdditionalProductParameterId,
			CONVERT(VARCHAR(10), @Value, 104) AS Value
	) AS SourceTable
	ON SourceTable.ProductId = TargetTable.ProductId AND
		SourceTable.AdditionalProductParameterId = TargetTable.AdditionalProductParameterId
	WHEN NOT MATCHED BY TARGET THEN
		INSERT (
			ProductId, 
			AdditionalProductParameterId,
			Value
		)
		VALUES (
			SourceTable.ProductId, 
			SourceTable.AdditionalProductParameterId,
			SourceTable.Value
		)
	WHEN MATCHED THEN
		UPDATE 
			SET IsActive = 1,
				Value = SourceTable.Value;

END
GO
PRINT N'Creating [dbo].[UspSaveProductAdditionalParameterValueFloat]...';


GO
CREATE PROCEDURE [dbo].[UspSaveProductAdditionalParameterValueFloat]
	@ProductCode AS VARCHAR(64),
	@AdditionalProductParameterCode AS VARCHAR(64),
	@Value DECIMAL(10, 2)
AS
BEGIN
	DECLARE @ProductId BIGINT;
	DECLARE @AdditionalProductParameterId BIGINT;
	DECLARE @Error VARCHAR(256) = '';

	SELECT TOP(1) @ProductId = pro.Id 
	FROM Product pro WITH (NOLOCK) 
	WHERE pro.Code = @ProductCode AND pro.IsActive = 1;

	SELECT TOP(1) @AdditionalProductParameterId = app.Id 
	FROM AdditionalProductParameter app WITH (NOLOCK) 
	INNER JOIN DataType dt WITH (NOLOCK) ON dt.Id = app.DataTypeId
	WHERE app.Code = @AdditionalProductParameterCode AND app.IsActive = 1 AND dt.Code = '1';

	IF @ProductId IS NULL
		SET @Error = 'Товар не существует. ';
	IF @AdditionalProductParameterId IS NULL 
		SET @Error = CONCAT(@Error, 'Дополнительный параметр продукта не существует или имеет неверный формат');

	IF @Error <> ''
		THROW 51001, @Error, 1;

	MERGE ProductAdditionalProductParameterMapping AS TargetTable
	USING
	(
		SELECT @ProductId AS ProductId, 
			@AdditionalProductParameterId AS AdditionalProductParameterId,
			CAST(@Value AS VARCHAR(MAX)) AS Value
	) AS SourceTable
	ON SourceTable.ProductId = TargetTable.ProductId AND
		SourceTable.AdditionalProductParameterId = TargetTable.AdditionalProductParameterId
	WHEN NOT MATCHED BY TARGET THEN
		INSERT (
			ProductId, 
			AdditionalProductParameterId,
			Value
		)
		VALUES (
			SourceTable.ProductId, 
			SourceTable.AdditionalProductParameterId,
			SourceTable.Value
		)
	WHEN MATCHED THEN
		UPDATE 
			SET IsActive = 1,
				Value = SourceTable.Value;

END
GO
PRINT N'Creating [dbo].[UspSaveProductAdditionalParameterValueText]...';


GO
CREATE PROCEDURE [dbo].[UspSaveProductAdditionalParameterValueText]
	@ProductCode AS VARCHAR(64),
	@AdditionalProductParameterCode AS VARCHAR(64),
	@Value DATE
AS
BEGIN
	DECLARE @ProductId BIGINT;
	DECLARE @AdditionalProductParameterId BIGINT;
	DECLARE @Error VARCHAR(256) = '';

	SELECT TOP(1) @ProductId = pro.Id 
	FROM Product pro WITH (NOLOCK) 
	WHERE pro.Code = @ProductCode AND pro.IsActive = 1;

	SELECT TOP(1) @AdditionalProductParameterId = app.Id 
	FROM AdditionalProductParameter app WITH (NOLOCK) 
	INNER JOIN DataType dt WITH (NOLOCK) ON dt.Id = app.DataTypeId
	WHERE app.Code = @AdditionalProductParameterCode AND app.IsActive = 1 AND dt.Code = '2';

	IF @ProductId IS NULL
		SET @Error = 'Товар не существует. ';
	IF @AdditionalProductParameterId IS NULL 
		SET @Error = CONCAT(@Error, 'Дополнительный параметр продукта не существует или имеет неверный формат');

	IF @Error <> ''
		THROW 51001, @Error, 1;

	MERGE ProductAdditionalProductParameterMapping AS TargetTable
	USING
	(
		SELECT @ProductId AS ProductId, 
			@AdditionalProductParameterId AS AdditionalProductParameterId,
			@Value AS Value
	) AS SourceTable
	ON SourceTable.ProductId = TargetTable.ProductId AND
		SourceTable.AdditionalProductParameterId = TargetTable.AdditionalProductParameterId
	WHEN NOT MATCHED BY TARGET THEN
		INSERT (
			ProductId, 
			AdditionalProductParameterId,
			Value
		)
		VALUES (
			SourceTable.ProductId, 
			SourceTable.AdditionalProductParameterId,
			SourceTable.Value
		)
	WHEN MATCHED THEN
		UPDATE 
			SET IsActive = 1,
				Value = SourceTable.Value;

END
GO
PRINT N'Creating [dbo].[UspSaveStoreAdditionalParameterValueDate]...';


GO
CREATE PROCEDURE [dbo].[UspSaveStoreAdditionalParameterValueDate]
	@StoreCode AS VARCHAR(64),
	@AdditionalStoreParameterCode AS VARCHAR(64),
	@Value DATE
AS
BEGIN
	DECLARE @StoreId BIGINT;
	DECLARE @AdditionalStoreParameterId BIGINT;
	DECLARE @Error VARCHAR(256) = '';

	SELECT TOP(1) @StoreId = pro.Id 
	FROM Store pro WITH (NOLOCK) 
	WHERE pro.Code = @StoreCode AND pro.IsActive = 1;

	SELECT TOP(1) @AdditionalStoreParameterId = asp.Id 
	FROM AdditionalStoreParameter asp WITH (NOLOCK) 
	INNER JOIN DataType dt WITH (NOLOCK) ON dt.Id = asp.DataTypeId
	WHERE asp.Code = @AdditionalStoreParameterCode AND asp.IsActive = 1 AND dt.Code = '3';

	IF @StoreId IS NULL
		SET @Error = 'Товар не существует. ';
	IF @AdditionalStoreParameterId IS NULL 
		SET @Error = CONCAT(@Error, 'Дополнительный параметр продукта не существует или имеет неверный формат');

	IF @Error <> ''
		THROW 51002, @Error, 1;

	MERGE StoreAdditionalStoreParameterMapping AS TargetTable
	USING
	(
		SELECT @StoreId AS StoreId, 
			@AdditionalStoreParameterId AS AdditionalStoreParameterId,
			CONVERT(VARCHAR(10), @Value, 104) AS Value
	) AS SourceTable
	ON SourceTable.StoreId = TargetTable.StoreId AND
		SourceTable.AdditionalStoreParameterId = TargetTable.AdditionalStoreParameterId
	WHEN NOT MATCHED BY TARGET THEN
		INSERT (
			StoreId, 
			AdditionalStoreParameterId,
			Value
		)
		VALUES (
			SourceTable.StoreId, 
			SourceTable.AdditionalStoreParameterId,
			SourceTable.Value
		)
	WHEN MATCHED THEN
		UPDATE 
			SET IsActive = 1,
				Value = SourceTable.Value;

END
GO
PRINT N'Creating [dbo].[UspSaveStoreAdditionalParameterValueFloat]...';


GO
CREATE PROCEDURE [dbo].[UspSaveStoreAdditionalParameterValueFloat]
	@StoreCode AS VARCHAR(64),
	@AdditionalStoreParameterCode AS VARCHAR(64),
	@Value DECIMAL(10, 2)
AS
BEGIN
	DECLARE @StoreId BIGINT;
	DECLARE @AdditionalStoreParameterId BIGINT;
	DECLARE @Error VARCHAR(256) = '';

	SELECT TOP(1) @StoreId = pro.Id 
	FROM Store pro WITH (NOLOCK) 
	WHERE pro.Code = @StoreCode AND pro.IsActive = 1;

	SELECT TOP(1) @AdditionalStoreParameterId = asp.Id 
	FROM AdditionalStoreParameter asp WITH (NOLOCK) 
	INNER JOIN DataType dt WITH (NOLOCK) ON dt.Id = asp.DataTypeId
	WHERE asp.Code = @AdditionalStoreParameterCode AND asp.IsActive = 1 AND dt.Code = '1';

	IF @StoreId IS NULL
		SET @Error = 'Товар не существует. ';
	IF @AdditionalStoreParameterId IS NULL 
		SET @Error = CONCAT(@Error, 'Дополнительный параметр магазина не существует или имеет неверный формат');

	IF @Error <> ''
		THROW 51002, @Error, 1;

	MERGE StoreAdditionalStoreParameterMapping AS TargetTable
	USING
	(
		SELECT @StoreId AS StoreId, 
			@AdditionalStoreParameterId AS AdditionalStoreParameterId,
			CAST(@Value AS VARCHAR(MAX)) AS Value
	) AS SourceTable
	ON SourceTable.StoreId = TargetTable.StoreId AND
		SourceTable.AdditionalStoreParameterId = TargetTable.AdditionalStoreParameterId
	WHEN NOT MATCHED BY TARGET THEN
		INSERT (
			StoreId, 
			AdditionalStoreParameterId,
			Value
		)
		VALUES (
			SourceTable.StoreId, 
			SourceTable.AdditionalStoreParameterId,
			SourceTable.Value
		)
	WHEN MATCHED THEN
		UPDATE 
			SET IsActive = 1,
				Value = SourceTable.Value;

END
GO
PRINT N'Creating [dbo].[UspSaveStoreAdditionalParameterValueText]...';


GO
CREATE PROCEDURE [dbo].[UspSaveStoreAdditionalParameterValueText]
	@StoreCode AS VARCHAR(64),
	@AdditionalStoreParameterCode AS VARCHAR(64),
	@Value DATE
AS
BEGIN
	DECLARE @StoreId BIGINT;
	DECLARE @AdditionalStoreParameterId BIGINT;
	DECLARE @Error VARCHAR(256) = '';

	SELECT TOP(1) @StoreId = pro.Id 
	FROM Store pro WITH (NOLOCK) 
	WHERE pro.Code = @StoreCode AND pro.IsActive = 1;

	SELECT TOP(1) @AdditionalStoreParameterId = asp.Id 
	FROM AdditionalStoreParameter asp WITH (NOLOCK) 
	INNER JOIN DataType dt WITH (NOLOCK) ON dt.Id = asp.DataTypeId
	WHERE asp.Code = @AdditionalStoreParameterCode AND asp.IsActive = 1 AND dt.Code = '2';

	IF @StoreId IS NULL
		SET @Error = 'Товар не существует. ';
	IF @AdditionalStoreParameterId IS NULL 
		SET @Error = CONCAT(@Error, 'Дополнительный параметр продукта не существует или имеет неверный формат');

	IF @Error <> ''
		THROW 51002, @Error, 1;

	MERGE StoreAdditionalStoreParameterMapping AS TargetTable
	USING
	(
		SELECT @StoreId AS StoreId, 
			@AdditionalStoreParameterId AS AdditionalStoreParameterId,
			@Value AS Value
	) AS SourceTable
	ON SourceTable.StoreId = TargetTable.StoreId AND
		SourceTable.AdditionalStoreParameterId = TargetTable.AdditionalStoreParameterId
	WHEN NOT MATCHED BY TARGET THEN
		INSERT (
			StoreId, 
			AdditionalStoreParameterId,
			Value
		)
		VALUES (
			SourceTable.StoreId, 
			SourceTable.AdditionalStoreParameterId,
			SourceTable.Value
		)
	WHEN MATCHED THEN
		UPDATE 
			SET IsActive = 1,
				Value = SourceTable.Value;

END
GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '7a2a1ce8-2812-4949-8881-f536d6a90350')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('7a2a1ce8-2812-4949-8881-f536d6a90350')

GO

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

/*
	Скрипт заполняет данными таблицу DataType.
*/
MERGE DataType AS TargetTable
USING 
(
	SELECT '1' AS Code, 'Число' AS Name UNION
	SELECT '2' AS Code, 'Текст' AS Name UNION
	SELECT '3' AS Code, 'Дата' AS Name
) AS SourceTable
ON SourceTable.Code = TargetTable.Code
WHEN NOT MATCHED BY TARGET THEN
	INSERT (
		Code,
		Name
	)
	VALUES (
		SourceTable.Code,
		SourceTable.Name
	);
/*
	Скрипт заполняет данными таблицу PriceRange.
*/
MERGE PriceRange AS TargetTable
USING 
(
	SELECT 'Range1' AS Code, 'до 50 рублей' AS Name, 0 AS PriceLow, 50 AS PriceHigh UNION
	SELECT 'Range2' AS Code, '50 - 100 рублей' AS Name, 50 AS PriceLow, 100 AS PriceHigh UNION
	SELECT 'Range3' AS Code, '100 - 500 рублей' AS Name, 100 AS PriceLow, 500 AS PriceHigh UNION
	SELECT 'Range4' AS Code, 'остальные товары' AS Name, 500 AS PriceLow, NULL AS PriceHigh
) AS SourceTable
ON SourceTable.Code = TargetTable.Code
WHEN NOT MATCHED BY TARGET THEN
	INSERT (
		Code,
		Name,
		PriceLow,
		PriceHigh
	)
	VALUES (
		SourceTable.Code,
		SourceTable.Name,
		SourceTable.PriceLow,
		SourceTable.PriceHigh
	);

DECLARE @StoreCount INT;
SELECT @StoreCount = COUNT(*) FROM Store WITH (NOLOCK);
IF @StoreCount = 0
/*
	Скрипт заполняет базу данных тестовыми данными, если данных нет.
*/
MERGE Store AS TargetTable
USING 
(
	SELECT 'Store0001' AS Code, 'Первый магазин' AS Name UNION
	SELECT 'Store0002' AS Code, 'Второй магазин' AS Name UNION
	SELECT 'Store0003' AS Code, 'Третий магазин' AS Name
) AS SourceTable
ON TargetTable.Code = SourceTable.Code
WHEN NOT MATCHED BY TARGET THEN
	INSERT (
		Code,
		Name
	)
	VALUES (
		SourceTable.Code,
		SourceTable.Name
	);

MERGE Product AS TargetTable
USING 
(
	SELECT 'Product0001' AS Code, 'Зубная паста' AS Name, 69.99 AS Price UNION
	SELECT 'Product0002' AS Code, 'Зубная щетка' AS Name, 49.99 AS Price UNION
	SELECT 'Product0003' AS Code, 'Зубная щетка Lux' AS Name, 1299.99 AS Price UNION
	SELECT 'Product0004' AS Code, 'Мыло хозяйственное' AS Name, 17.00 AS Price UNION
	SELECT 'Product0005' AS Code, 'Мыло Dove' AS Name, 106.99 AS Price
) AS SourceTable
ON TargetTable.Code = SourceTable.Code
WHEN NOT MATCHED BY TARGET THEN
	INSERT (
		Code,
		Name,
		Price
	)
	VALUES (
		SourceTable.Code,
		SourceTable.Name,
		SourceTable.Price
	);

MERGE AdditionalProductParameter AS TargetTable
USING 
(
	SELECT src.Code, src.Name, dt.Id AS DataTypeId
	FROM 
	(
		SELECT 'ProductVolume' AS Code, 'Объем продукта' AS Name, '1' AS DataTypeCode UNION
		SELECT 'ProductCategory' AS Code, 'Категория продукта' AS Name, '3' AS DataTypeCode
	) src
	INNER JOIN DataType dt WITH (NOLOCK) ON dt.Code = src.DataTypeCode
) AS SourceTable
ON TargetTable.Code = SourceTable.Code
WHEN NOT MATCHED BY TARGET THEN
	INSERT (
		Code,
		Name,
		DataTypeId
	)
	VALUES (
		SourceTable.Code,
		SourceTable.Name,
		SourceTable.DataTypeId
	);

MERGE AdditionalProductParameter AS TargetTable
USING 
(
	SELECT src.Code, src.Name, dt.Id AS DataTypeId
	FROM 
	(
		SELECT 'ProductVolume' AS Code, 'Объем продукта' AS Name, '1' AS DataTypeCode UNION
		SELECT 'ProductCategory' AS Code, 'Категория продукта' AS Name, '3' AS DataTypeCode
	) src
	INNER JOIN DataType dt WITH (NOLOCK) ON dt.Code = src.DataTypeCode
) AS SourceTable
ON TargetTable.Code = SourceTable.Code
WHEN NOT MATCHED BY TARGET THEN
	INSERT (
		Code,
		Name,
		DataTypeId
	)
	VALUES (
		SourceTable.Code,
		SourceTable.Name,
		SourceTable.DataTypeId
	);

EXEC UspSaveProductAdditionalParameterValueFloat @ProductCode = 'Product0001',
	@AdditionalProductParameterCode = 'ProductVolume',
	@Value = 95.0;

EXEC UspSaveProductAdditionalParameterValueFloat @ProductCode = 'Product0002',
	@AdditionalProductParameterCode = 'ProductVolume',
	@Value = 70.0;

EXEC UspSaveProductAdditionalParameterValueFloat @ProductCode = 'Product0003',
	@AdditionalProductParameterCode = 'ProductVolume',
	@Value = 190.0;

EXEC UspSaveProductAdditionalParameterValueFloat @ProductCode = 'Product0004',
	@AdditionalProductParameterCode = 'ProductVolume',
	@Value = 200.0;

EXEC UspSaveProductAdditionalParameterValueFloat @ProductCode = 'Product0005',
	@AdditionalProductParameterCode = 'ProductVolume',
	@Value = 170.0;

CREATE TABLE #SaleId
(
	Id BIGINT NOT NULL
);

INSERT INTO Sale(StoreId, OperationDate)
OUTPUT inserted.Id INTO #SaleId(Id)
VALUES((SELECT TOP(1) Id FROM Store WHERE Code = 'Store0001'), GETDATE());

INSERT INTO SaleDetail(SaleId, ProductId, Quantity)
VALUES((SELECT TOP(1) Id FROM #SaleId), (SELECT TOP(1) Id FROM Product WHERE Code = 'Product0001'), 5);

INSERT INTO SaleDetail(SaleId, ProductId, Quantity)
VALUES((SELECT TOP(1) Id FROM #SaleId), (SELECT TOP(1) Id FROM Product WHERE Code = 'Product0002'), 7);

INSERT INTO SaleDetail(SaleId, ProductId, Quantity)
VALUES((SELECT TOP(1) Id FROM #SaleId), (SELECT TOP(1) Id FROM Product WHERE Code = 'Product0003'), 1);

TRUNCATE TABLE #SaleId;

INSERT INTO Sale(StoreId, OperationDate)
OUTPUT inserted.Id INTO #SaleId(Id)
VALUES((SELECT TOP(1) Id FROM Store WHERE Code = 'Store0001'), DATEADD(DAY, -2, GETDATE()));

INSERT INTO SaleDetail(SaleId, ProductId, Quantity)
VALUES((SELECT TOP(1) Id FROM #SaleId), (SELECT TOP(1) Id FROM Product WHERE Code = 'Product0002'), 1);

INSERT INTO SaleDetail(SaleId, ProductId, Quantity)
VALUES((SELECT TOP(1) Id FROM #SaleId), (SELECT TOP(1) Id FROM Product WHERE Code = 'Product0004'), 3);

INSERT INTO SaleDetail(SaleId, ProductId, Quantity)
VALUES((SELECT TOP(1) Id FROM #SaleId), (SELECT TOP(1) Id FROM Product WHERE Code = 'Product0006'), 2);

TRUNCATE TABLE #SaleId;

INSERT INTO Sale(StoreId, OperationDate)
OUTPUT inserted.Id INTO #SaleId(Id)
VALUES((SELECT TOP(1) Id FROM Store WHERE Code = 'Store0002'), DATEADD(MONTH, -2, GETDATE()));

INSERT INTO SaleDetail(SaleId, ProductId, Quantity)
VALUES((SELECT TOP(1) Id FROM #SaleId), (SELECT TOP(1) Id FROM Product WHERE Code = 'Product0003'), 2);

INSERT INTO SaleDetail(SaleId, ProductId, Quantity)
VALUES((SELECT TOP(1) Id FROM #SaleId), (SELECT TOP(1) Id FROM Product WHERE Code = 'Product0005'), 14);

INSERT INTO SaleDetail(SaleId, ProductId, Quantity)
VALUES((SELECT TOP(1) Id FROM #SaleId), (SELECT TOP(1) Id FROM Product WHERE Code = 'Product0006'), 3);

DROP TABLE #SaleId;
GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
